from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

from utils import random_sleep
from config import HOME_URL
from logger import setup_logger

logger = setup_logger()

CALENDAR_ROOT = "mat-calendar.mat-calendar.reservation-calander"
DAY_CELL_SELECTOR = (
    f"{CALENDAR_ROOT} td.mat-calendar-body-cell:not(.mat-calendar-body-disabled) "
    ".mat-calendar-body-cell-content"
)

# ===========================
# 1) L·∫§Y DANH S√ÅCH CASE H·ª¢P L·ªÜ
# ===========================
def get_case_numbers(driver):
    """
    L·∫•y c√°c case c√≥ Case type = 'Temporary residence permit'.
    - Ch·ªâ qu√©t trong kh·ªëi left 'direct-active-proceedings' ƒë·ªÉ tr√°nh khu kh√°c.
    - M·ªói case l√† 1 'card card--border' ch·ª©a c·∫£ 'Case type' v√† 'Case number'.
    - Dedupe theo href.
    """
    cases = []
    href_seen = set()

    try:
        # ƒê·∫£m b·∫£o khu 'My active cases' ƒë√£ render
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.XPATH, "//direct-active-proceedings"))
        )
    except TimeoutException:
        logger.warning("‚ö†Ô∏è Kh√¥ng th·∫•y khu 'direct-active-proceedings' sau 15s")
        return []

    random_sleep(0.8, 1.6)

    # L·∫•y ƒë√∫ng card g·ªëc (m·ªói case 1 card)
    case_cards = driver.find_elements(
        By.XPATH,
        "//direct-active-proceedings"
        "//div[contains(@class,'card') and contains(@class,'card--border')]"
        "[.//h3[normalize-space()='Case type'] and .//h3[normalize-space()='Case number']]"
    )

    logger.info(f"üîé T√¨m th·∫•y {len(case_cards)} Case")

    for idx, card in enumerate(case_cards, start=1):
        try:
            # Case type text
            type_el = card.find_element(
                By.XPATH, ".//h3[normalize-space()='Case type']/../following-sibling::div/p"
            )
            case_type = type_el.text.strip()

            # Ch·ªâ l·∫•y Temporary residence permit
            if case_type != "Temporary residence permit":
                continue

            # Case number ‚Üí href
            link_el = card.find_element(
                By.XPATH, ".//h3[normalize-space()='Case number']/../following-sibling::div/p/a"
            )
            href = link_el.get_attribute("href")

            if not href:
                logger.warning(f"‚ö†Ô∏è [{idx}] Kh√¥ng t√¨m th·∫•y href cho case Temporary residence permit")
                continue

            if href in href_seen:
                logger.info(f"‚Ü∫ [{idx}] B·ªè qua href tr√πng: {href}")
                continue

            href_seen.add(href)
            cases.append((case_type, href))

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è [{idx}] L·ªói parse 1 case: {e}")

    return cases

# ========================================
# 2) X·ª¨ L√ù 1 CASE: M·ªû L·ªäCH H·∫∏N & DUY·ªÜT SLOT
# ========================================
def process_case_link(driver, case_url, max_days=10, round_count=1):
    driver.get(case_url)
    wait = WebDriverWait(driver, 25)
    random_sleep(0.5, 1.2)
    # M·ªü accordion ƒë·∫∑t l·ªãch
    _open_make_appointment_section(driver, wait, case_url)
    random_sleep(0.5, 1.2)

    # Ch·ªçn location + queue theo round_count
    _select_location(driver, wait, round_count=round_count)
    random_sleep(0.5, 1.2)
    _select_queue(driver, wait, round_count=round_count)
    random_sleep(0.5, 1.2)

    # DD·ª£i calendar
    _wait_for_calendar_ready(driver, wait)
    random_sleep(0.5, 1.2)

    # Duy·ªát calendar
    done = _browse_calendar(driver, wait, max_months=6, max_days=max_days, round_count=round_count)

    # N·∫øu ƒë√£ ch·ªçn ƒë∆∞·ª£c gi·ªù (DONE) ‚Üí k·∫øt th√∫c lu√¥n, kh√¥ng qua v√≤ng 2
    if done == "DONE":
        return

    # N·∫øu ch·ªâ duy·ªát xong max_days ·ªü v√≤ng 1 m√† ch∆∞a c√≥ gi·ªù ‚Üí chuy·ªÉn qua v√≤ng 2
    if round_count == 1 and done:
        logger.info("‚û°Ô∏è Chuy·ªÉn sang Location + Queue v√≤ng 2")
        process_case_link(driver, case_url, max_days=max_days, round_count=2)


    

# -----------------------
# 2.1 M·ªü accordion ƒë·∫∑t l·ªãch
# -----------------------
def _open_make_appointment_section(driver, wait, case_url):
    driver.get(case_url)
    wait = WebDriverWait(driver, 10)
    try:
        section = wait.until(
            EC.presence_of_element_located(
                (By.XPATH, "//h3[contains(text(), 'Make an appointment at the office')]/..")
            )
        )
        logger.info(f"‚úÖ T√¨m th·∫•y m·ª•c 'Make an appointment at the office' t·∫°i {case_url}")
        button = section.find_element(By.XPATH, ".//following-sibling::button[contains(@class, 'btn--accordion')]")
        driver.execute_script("arguments[0].click();", button)
    except TimeoutException:
        logger.warning("‚ùå Kh√¥ng c√≥ m·ª•c 'Make an appointment...' ‚Üí quay l·∫°i home")
        driver.get(HOME_URL)

# -----------------------
# 2.2 Ch·ªçn Location
# -----------------------
def _select_location(driver, wait, round_count=1):
    location_select = wait.until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, 'mat-select[name="location"]'))
    )
    location_select.click()

    if round_count == 1:
        option = wait.until(
            EC.element_to_be_clickable(
                (By.XPATH, "//mat-option//span[contains(text(), 'ul. Marsza≈Çkowska 3/5, 00-624 Warszawa')]")
            )
        )
        option.click()
        logger.info("‚úÖ ƒê√£ ch·ªçn location (Marsza≈Çkowska)")
    else:
        option = wait.until(
            EC.element_to_be_clickable(
                (By.XPATH, "//mat-option//span[contains(text(), 'pl. Bankowy 3/5 00-950 Warszawa')]")
            )
        )
        option.click()
        logger.info("‚úÖ ƒê√£ ch·ªçn location (Bankowy)")

# -----------------------
# 2.2 Ch·ªçn Queue
# -----------------------
def _select_queue(driver, wait, round_count=1):
    queue_select = wait.until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, 'mat-select[name="queueName"]'))
    )
    queue_select.click()

    if round_count == 1:
        option = wait.until(
            EC.element_to_be_clickable(
                (By.XPATH, "//mat-option//span[contains(text(), 'X - applications for TEMPORARY STAY')]")
            )
        )
        option.click()
        logger.info("‚úÖ ƒê√£ ch·ªçn queue (X - TEMPORARY STAY)")
    else:
        option = wait.until(
            EC.element_to_be_clickable(
                (By.XPATH, "//mat-option//span[contains(text(), 'G - Applications for TEMPORARY STAY - marriages and family stays 3/5 Bankowy Square entrance G')]")
            )
        )
        option.click()
        logger.info("‚úÖ ƒê√£ ch·ªçn queue (Bankowy G)")

# -----------------------
# 2.3 Ch·ªù Calendar s·∫µn s√†ng
# -----------------------
def _wait_for_calendar_ready(driver, wait, expect_change=False, prev_label=None):
    """
    ƒê·ª£i calendar '·ªïn ƒë·ªãnh':
      - (n·∫øu expect_change) ch·ªù nh√£n th√°ng thay ƒë·ªïi sau khi b·∫•m Next.
      - ƒê·ª£i spinner xu·∫•t hi·ªán (t·ªëi ƒëa 8s) r·ªìi ·∫©n (t·ªëi ƒëa 30s).
      - ƒê·ª£i c√≥ >= 1 √¥ ng√†y hi·ªÉn th·ªã.
      - ƒê·ª£i danh s√°ch ng√†y ·ªïn ƒë·ªãnh (2 l·∫ßn ƒë·ªçc gi·ªëng nhau).
    """
    # Nh√£n th√°ng ƒë·ªïi?
    if expect_change and prev_label:
        try:
            wait.until(
                lambda d: d.find_element(By.CSS_SELECTOR, "button.mat-calendar-period-button span").text.strip()
                != prev_label
            )
        except Exception:
            logger.warning("‚ö†Ô∏è ƒê·ª£i ƒë·ªïi th√°ng qu√° l√¢u, ti·∫øp t·ª•c ki·ªÉm tra spinner")

    # Calendar container
    wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, CALENDAR_ROOT)))
    logger.info("üîÑ Calendar container ƒë√£ xu·∫•t hi·ªán")

    # Spinner xu·∫•t hi·ªán r·ªìi ·∫©n
    try:
        WebDriverWait(driver, 8).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".reservation__calendar .spinner"))
        )
        logger.info("‚è≥ Spinner xu·∫•t hi·ªán, ch·ªù ·∫©n...")
        WebDriverWait(driver, 30).until(
            EC.invisibility_of_element_located((By.CSS_SELECTOR, ".reservation__calendar .spinner"))
        )
    except TimeoutException:
        logger.warning("‚ö†Ô∏è Kh√¥ng th·∫•y spinner (c√≥ th·ªÉ load qu√° nhanh)")

    # C√≥ √≠t nh·∫•t 1 ng√†y
    wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, DAY_CELL_SELECTOR)))

    # Danh s√°ch ng√†y ·ªïn ƒë·ªãnh
    for _ in range(6):
        days1 = [d.text for d in driver.find_elements(By.CSS_SELECTOR, DAY_CELL_SELECTOR)]
        random_sleep(0.35, 0.6)
        days2 = [d.text for d in driver.find_elements(By.CSS_SELECTOR, DAY_CELL_SELECTOR)]
        if days1 and days1 == days2:
            logger.info("‚úÖ Calendar ƒë√£ s·∫µn s√†ng (ng√†y ·ªïn ƒë·ªãnh)")
            return
    logger.warning("‚ö†Ô∏è Calendar c√≥ v·∫ª ch∆∞a ho√†n to√†n ·ªïn ƒë·ªãnh, ti·∫øp t·ª•c x·ª≠ l√Ω")


# -----------------------
# 2.4 Duy·ªát Calendar
# -----------------------
def _browse_calendar(driver, wait, max_months=6, max_days=10, round_count=1):
    day_clicked = 0
    months_checked = 0

    while months_checked < max_months and day_clicked < max_days:
        # ƒê·∫£m b·∫£o calendar s·∫µn s√†ng tr∆∞·ªõc khi ƒë·ªçc
        _wait_for_calendar_ready(driver, wait)

        try:
            month_label = driver.find_element(By.CSS_SELECTOR, "button.mat-calendar-period-button span").text.strip()
        except Exception:
            month_label = "UNKNOWN"

        # L·∫•y c√°c √¥ ng√†y c√≥ th·ªÉ click
        day_els = driver.find_elements(By.CSS_SELECTOR, DAY_CELL_SELECTOR)
        clickable_days = []
        for d in day_els:
            try:
                # B·ªè √¥ r·ªóng
                if not d.text.strip():
                    continue
                # ƒê·∫£m b·∫£o TD kh√¥ng disabled (ƒë√£ l·ªçc ·ªü CSS, nh∆∞ng ki·ªÉm tra th√™m cho ch·∫Øc)
                td = d.find_element(By.XPATH, "..")
                if "mat-calendar-body-disabled" in td.get_attribute("class"):
                    continue
                clickable_days.append(d)
            except Exception:
                continue

        if clickable_days:
            logger.info(f"‚úÖ {month_label}: T√¨m th·∫•y {len(clickable_days)} ng√†y kh·∫£ d·ª•ng")
            for d in clickable_days:
                if day_clicked >= max_days:
                    break
                try:
                    driver.execute_script("arguments[0].click();", d)
                    logger.info(f"üëâ Click ng√†y: {d.text}")
                    random_sleep(1.2, 2.2)
                    if select_time_slot(driver):  # ch·ªâ d·ª´ng khi confirm th√†nh c√¥ng
                        return "DONE"
                    day_clicked += 1
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Kh√¥ng click ƒë∆∞·ª£c ng√†y {d.text}: {e}")
        else:
            logger.warning(f"‚ö†Ô∏è {month_label}: Kh√¥ng c√≥ ng√†y kh·∫£ d·ª•ng")

        if day_clicked >= max_days:
            logger.info(f"‚õî ƒê√£ click ƒë·ªß {max_days} ng√†y, d·ª´ng duy·ªát th√°ng")
            return True

        # Sang th√°ng k·∫ø
        try:
            prev_label = month_label
            next_btn = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button.mat-calendar-next-button")))
            driver.execute_script("arguments[0].click();", next_btn)
            months_checked += 1
            _wait_for_calendar_ready(driver, wait, expect_change=True, prev_label=prev_label)
        except Exception:
            logger.error("‚ùå Kh√¥ng th·ªÉ sang th√°ng ti·∫øp theo, d·ª´ng l·∫°i")
            break

# -----------------------
# 2.5 Ch·ªçn gi·ªù + x√°c nh·∫≠n
# -----------------------
def select_time_slot(driver):
    wait = WebDriverWait(driver, 10)

    logger.info("üîÑ ƒêang load gi·ªù...")
    try:
        wait.until(EC.invisibility_of_element_located((By.CSS_SELECTOR, ".reservation__hours .spinner")))
    except:
        logger.warning("‚ö†Ô∏è Kh√¥ng th·∫•y spinner gi·ªù ho·∫∑c bi·∫øn m·∫•t qu√° nhanh")

    try:
        hours = wait.until(
            EC.presence_of_all_elements_located(
                (By.CSS_SELECTOR, ".reservation__hours .tiles--hours button.tiles__link")
            )
        )
        logger.info(f"‚úÖ T√¨m th·∫•y {len(hours)} gi·ªù kh·∫£ d·ª•ng")

        for h in hours:
            try:
                driver.execute_script("arguments[0].click();", h)
                logger.info(f"üëâ ƒê√£ click gi·ªù: {h.text.strip()}")
                random_sleep(1, 2)

                # ch·ªù confirm dialog
                confirm = WebDriverWait(driver, 5).until(
                    EC.presence_of_element_located(
                        (By.CSS_SELECTOR, ".mat-dialog-actions button[color='primary']")
                    )
                )
                driver.execute_script("arguments[0].click();", confirm)
                logger.info("‚úÖ ƒê√£ x√°c nh·∫≠n gi·ªù h·∫πn th√†nh c√¥ng")
                return True  # th√†nh c√¥ng th√¨ stop

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Gi·ªù {h.text.strip()} kh√¥ng ƒë·∫∑t ƒë∆∞·ª£c: {e}")
                continue

    except Exception as e:
        logger.error(f"‚ùå Kh√¥ng t√¨m th·∫•y gi·ªù: {e}")

    return False


def notify_done():
    """Th√¥ng b√°o khi t·∫•t c·∫£ user ƒë√£ ho√†n th√†nh"""
    logger.info("\nüéâüéâüéâ T·∫§T C·∫¢ USER ƒê√É HO√ÄN TH√ÄNH QUY TR√åNH üéâüéâüéâ\n")
